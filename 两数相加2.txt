/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if (l1 == NULL) return l2;
  if (l2 == NULL) return l1;
  stack<int> st1, st2;
  ListNode *head = NULL;
  ListNode *cur = NULL;
  int sum = 0;
  int carry = 0;
  while (l1 != NULL) {
    st1.push(l1->val);
    l1 = l1->next;
  }
  while (l2 != NULL) {
    st2.push(l2->val);
    l2 = l2->next;
  }
  //用两个while逻辑上差了些，但是减少了判断次数
  while (!st1.empty()) {
    if (!st2.empty()) {
      sum = st1.top() + st2.top() + carry;
      carry = sum > 9 ? 1 : 0;
      cur = head;
      head = new ListNode(sum % 10);
      head->next = cur;
      st1.pop();
      st2.pop();
    } else {
      sum = st1.top() + carry;
      carry = sum > 9 ? 1 : 0;
      cur = head;
      head = new ListNode(sum % 10);
      head->next = cur;
      st1.pop();
    }
  }
  while (!st2.empty()) {
    sum = st2.top() + carry;
    carry = sum > 9 ? 1 : 0;
    cur = head;
    head = new ListNode(sum % 10);
    head->next = cur;
    st2.pop();
  }
  
  if (carry) {
    cur = head;
    head = new ListNode(1);
    head->next = cur;
  }
  return head;
    }
};