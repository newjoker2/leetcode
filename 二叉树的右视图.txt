/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
            
        vector<vector<int>> res;
        vector<int>  result;
        if( root == NULL )
             return result;
        
        queue< pair<TreeNode*,int> > q; // pair(Öµ£¬²ãÊý)
        q.push( make_pair( root , 0 ) );
        while( !q.empty() )
        {
            TreeNode* node = q.front().first;
            int level = q.front().second;
            q.pop();
            if( level == res.size() )
            {
                vector<int>   r;
                res.push_back(r);
            }
            res[level].push_back( node->val );
            if( node->left )
                q.push( make_pair( node->left, level+1 ) );
            if( node->right )
                q.push( make_pair( node->right , level+1 ) );

        }
         
        for( int i = 0; i < res.size(); i++)
        {
             int num = res[i].size();
             result.push_back( res[i][num-1]);
        }
        return result;
    }
};