class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
          int n = matrix.size();
        for (int i = 0; i < n - 1; ++i) {
            for (int j = 0; j < n - i; ++j) {
                swap(matrix[i][j], matrix[n - 1- j][n - 1 - i]);
            }
        }
        for (int i = 0; i < n / 2; ++i) {
            for (int j = 0; j < n; ++j) {
                swap(matrix[i][j], matrix[n - 1 - i][j]);
            }
        }
    }
    
};
//首先以从对角线为轴翻转，然后再以x轴中线上下翻转即可得到结果


class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int length=matrix.size();
        for(int i=0;i<length;i++)
        {
            for(int j=i+1;j<length;j++)
            {
                swap(matrix[i][j],matrix[j][i]);
            }
            
             reverse(matrix[i].begin(), matrix[i].end());   //  reverse 反转数组
	//每转一次就反转一行
        }
        
        
        
    }
   //首先对原数组取其转置矩阵，然后把每行的数字翻转可得到结果
};